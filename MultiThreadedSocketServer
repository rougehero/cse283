package homework;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
 
 
public class MultiThreadedSocketServer implements Runnable {
 
    ServerSocket myServerSocket;
    boolean ServerOn = true;
    int seq = 0;
    String clientSentence;
	int min, max, answer, counter;
	boolean trying = false;
	
 
    public MultiThreadedSocketServer() 
    { 
        try
        { 
            myServerSocket = new ServerSocket(11111); 
        } 
        catch(IOException ioe) 
        { 
            System.out.println("Could not create server socket on port 11111. Quitting."); 
            System.exit(-1); 
        } 
 
 
 
        /*
        Calendar now = Calendar.getInstance();
        SimpleDateFormat formatter = new SimpleDateFormat("E yyyy.MM.dd 'at' hh:mm:ss a zzz");
        System.out.println("It is now : " + formatter.format(now.getTime()));
 		*/
 
 
 
        // Successfully created Server Socket. Now wait for connections. 
        while(ServerOn) 
        {                        
            try
            { 
                // Accept incoming connections. 
                Socket clientSocket = myServerSocket.accept(); 
                
				seq++;
				
                // accept() will block until a client connects to the server. 
                // If execution reaches this point, then it means that a client 
                // socket has been accepted. 
 
                // For each client, we will start a service thread to 
                // service the client requests. This is to demonstrate a 
                // Multi-Threaded server. Starting a thread also lets our 
                // MultiThreadedSocketServer accept multiple connections simultaneously. 
 
                // Start a Service thread 
 
                ClientServiceThread cliThread = new ClientServiceThread(clientSocket, seq);
                cliThread.start(); 
 
            } 
            catch(IOException ioe) 
            { 
                System.out.println("Exception encountered on accept. Ignoring. Stack Trace :"); 
                ioe.printStackTrace(); 
            } 
 
        }
 
        try
        { 
            myServerSocket.close(); 
            System.out.println("Server Stopped"); 
        } 
        catch(Exception ioe) 
        { 
            System.out.println("Problem stopping server socket"); 
            System.exit(-1); 
        } 
 
 
 
    } 
 
    public static void main (String[] args) 
    { 
        new MultiThreadedSocketServer();        
    } 
 
 
    class ClientServiceThread extends Thread 
    { 
        Socket myClientSocket;
        boolean m_bRunThread = true; 
        int sessionID;
		
		
        public ClientServiceThread() 
        { 
            super(); 
        } 
 
        ClientServiceThread(Socket s, int ID) 
        { 
            myClientSocket = s; 
			sessionID = ID;
 
        } 
 
        public void run() 
        {            
            // Obtain the input stream and the output stream for the socket 
            // A good practice is to encapsulate them with a BufferedReader 
            // and a PrintWriter as shown below. 
            BufferedReader in = null; 
            PrintWriter out = null; 
 
            // Print out details of this connection 
            System.out.println("sessionID "+sessionID+"  Accepted Client Address - " + myClientSocket.getInetAddress().getHostName()); 
 
            try
            {                                
                in = new BufferedReader(new InputStreamReader(myClientSocket.getInputStream())); 
                out = new PrintWriter(new OutputStreamWriter(myClientSocket.getOutputStream())); 
 
                // At this point, we can read for input and reply with appropriate output. 
 
                
                // Run in a loop until m_bRunThread is set to false 
                while(m_bRunThread) 
                {                    
                   // read incoming stream 
                   //String clientCommand = "mmm ok";//in.readLine(); 
                   //System.out.println("sessionID "+sessionID+"  Client Says :" + clientCommand);
                    
                    
 
                    if(!ServerOn) 
                    { 
                        // Special command. Quit this thread 
                        System.out.print("Server has already stopped"); 
                        out.println("Server has already stopped"); 
                        out.flush(); 
                        m_bRunThread = false;   
 
                    } 
 
                    min = 1;
        			max = 10;
        			answer = min + (int)(Math.random()*max);
        			counter = 0;
        			
        			clientSentence = "guess a number between: " + min + " and " + max + "\n";
        			out.write(clientSentence);
        			out.flush();
                    
                    
            		do{	
                    		
            				//System.out.println("Test PRE ANSWER");
            				String guess = in.readLine();
            				int holder = Integer.parseInt(guess);
            				//System.out.println("Test POST ANSWER");
            				if (holder == answer){
            					out.write("OK\n");
            					out.flush();
            					counter++;
            					trying = true;
            				}
            				else{
            					counter++;
            					out.write("try again\n");
            					out.flush();
            				}
            				
            				if(counter >= 4){
            					out.write("alright\n");
            					out.flush();
            					out.write("the answer is: " + answer + "\n");
            					out.flush();
            					trying = true;
            					break;
            				}
            				
            			}while(trying==false);
            			
                    }
                
            } 
            catch(Exception e) 
            { 
                e.printStackTrace(); 
            } 
            finally
            { 
                // Clean up 
                try
                {                    
                    in.close(); 
                    out.close(); 
                    myClientSocket.close(); 
                    System.out.println("...Stopped"); 
                } 
                catch(IOException ioe) 
                { 
                    ioe.printStackTrace(); 
                } 
            } 
        } 
 
 
    }


	@Override
	public void run() {
		// TODO Auto-generated method stub
		
	} 
}
